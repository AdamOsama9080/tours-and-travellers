import React, { useState, useEffect } from 'react';
import axios from 'axios';
import CanvasJSReact from '@canvasjs/react-charts';

const CanvasJSChart = CanvasJSReact.CanvasJSChart;

const Finance = () => {
  const [dataPoints, setDataPoints] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(false); 
  const [pricePerTravel, setPricePerTravel] = useState('');
  const [totalTravelers, setTotalTravelers] = useState('');
  const [expenses, setExpenses] = useState('');
  const [profit, setProfit] = useState('');


  const calculateProfit = () => {
    const income = parseFloat(pricePerTravel) * parseFloat(totalTravelers);
    const netProfit = income - parseFloat(expenses);
    setProfit(netProfit.toFixed(2));
  };

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    if (!isLoading) {
      setIsLoading(true);
      try {
        const response = await axios.get('https://tours-api-7hh1.onrender.com/tours/tours');
        const tourData = response.data.data;
        const sortedTourData = tourData.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
        const calculatedDataPoints = calculateProfits(sortedTourData);
        setDataPoints(calculatedDataPoints);
        setIsLoaded(true);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    }
  };


  const calculateProfits = (tourData) => {
    return tourData.map(tour => ({
      x: new Date(tour.startDate),
      y: tour.price * tour.totalTravelers
    }));
  };

  const options = {
    title: {
      text: "Profits Generated by Tours"
    },
    theme: "light2",
    subtitles: [{
      text: "Tour Profits"
    }],
    axisX: {
      crosshair: {
        enabled: true,
        snapToDataPoint: true,
        valueFormatString: "MMM DD YYYY"
      }
    },
    axisY: {
      title: "Profit",
      prefix: "$",
      crosshair: {
        enabled: true,
        snapToDataPoint: true,
        valueFormatString: "$#,###.##"
      }
    },
    toolTip: {
      shared: true
    },
    data: [{
      type: "splineArea",
      color: "#3576a8",
      yValueFormatString: "$#,###.##",
      xValueFormatString: "MMM DD YYYY",
      dataPoints: dataPoints
    }]
  };

  const containerProps = {
    width: "100%",
    height: "450px",
    margin: "auto"
  };

  return (

    <div className='col-md-9 m-3'>
      <div className='row'>

        <div className='card -shadow p-2'>
          <CanvasJSChart containerProps={containerProps} options={options} />
        </div>

        <div className='card shadow mt-3 p-2'>
          <div className='title fs-4 fw-bold'>Finance Calculator</div>
          <div className='row m-3'>
            <div className='col-md-12'>
              <input
                type="number"
                className='form-control'
                placeholder="Enter Price Per Travel"
                value={pricePerTravel}
                onChange={(e) => setPricePerTravel(e.target.value)}
              />
            </div>
          </div>
          <div className='row m-3'>
            <div className='col-md-12'>
              <input
                type="number"
                className='form-control'
                placeholder="Enter Total Travelers"
                value={totalTravelers}
                onChange={(e) => setTotalTravelers(e.target.value)}
              />
            </div>
          </div>
          <div className='row m-3'>
            <div className='col-md-12'>
              <input
                type="number"
                className='form-control'
                placeholder="Enter Expenses"
                value={expenses}
                onChange={(e) => setExpenses(e.target.value)}
              />
            </div>

          </div>
          <div className='row m-3'>
            <div className='col-md-12'>
              <button className='btn btn-primary' onClick={calculateProfit}>Calculate Profit</button>
            </div>
          </div>
          {profit && (
            <div className='row mt-3'>
              <div className='col-md-12'>
                <h5>Profit: EGY {profit}</h5>
              </div>
            </div>
          )}
        </div>
      </div>
    </div >


  );
};

export default Finance;
